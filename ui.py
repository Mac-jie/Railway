# -*- coding: utf-8 -*-
import glob
import subprocess
import atexit

# Form implementation generated from reading ui file 'Shangyi7.22wu2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from ast import Import
from functools import partial
from http.client import ImproperConnectionState
import json
import os
import sys
from random import randint

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, pyqtSignal, QPointF, QRectF, QTimer
from PyQt5.QtGui import QPixmap, QPainter, QPen, QColor, QBrush, QPainterPath
from PyQt5.QtWidgets import QWidget, QFileDialog, QMessageBox, QGraphicsScene, \
    QGraphicsPixmapItem, QGraphicsView, QGraphicsItem, QGraphicsEllipseItem, QInputDialog, QListWidgetItem, \
    QGraphicsRectItem, QFrame, QGraphicsPathItem, QLabel, QHBoxLayout, QApplication, QMainWindow, QVBoxLayout, \
    QPushButton, QToolButton, QDockWidget, QGridLayout, QListWidget, QComboBox

import base64
from PIL import Image
import io

from refactor.utils import get_image, get_folder_img_info


def set_menu_button(icon_path, btn_name, btn_text, short_cut):
    btn = QToolButton()
    # btn.setGeometry(QtCore.QRect(10, 300, 120, 55))
    if icon_path:
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        btn.setIcon(icon)
    btn.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
    btn.setObjectName(btn_name)
    btn.setText(btn_text)
    if short_cut:
        btn.setShortcut(short_cut)

    return btn


def set_inform_block(list_widget_name, window_title):
    dockWidget = QDockWidget()
    # dockWidget.setGeometry(QtCore.QRect(x,y,w,h))
    # dockWidget.setObjectName("dockWidget")
    dockWidgetContents = QWidget()
    # dockWidgetContents.setObjectName("dockWidgetContents")
    grid_layout = QGridLayout(dockWidgetContents)
    grid_layout.setContentsMargins(0, 0, 0, 0)
    # gridLayout_4.setObjectName("gridLayout_4")
    list_widget = QListWidget(dockWidgetContents)
    list_widget.setObjectName(list_widget_name)
    grid_layout.addWidget(list_widget, 0, 0, 1, 1)

    dockWidget.setWidget(dockWidgetContents)
    dockWidget.setWindowTitle(window_title)

    return dockWidget


def set_model_options():
    combo_box = QComboBox()
    # combo_box.setGeometry(QtCore.QRect(1260, 40, 171, 21))
    # combo_box.setObjectName("comboBox")
    combo_box.addItems(["选择模型", "Yolo_v3(默认)", "DiffusionDet", "ViTDet"])

    return combo_box


class Ui(QMainWindow):
    def __init__(self):
        super().__init__()

        self.btn_show_real_time = set_menu_button("../image/实时数据.png", 'btn_show_real_time', ' 实况目录 ',
                                                  "Ctrl+U")
        self.btn_open_img = set_menu_button("../image/打开图片.png", 'btn_open_img', ' 打开图片 ', "Ctrl+J")
        self.btn_open_folder = set_menu_button("../image/打开文件.jpg", 'btn_open_folder', ' 打开目录 ',
                                               "Ctrl+O")
        self.btn_create_rect_box = set_menu_button("../image/创建矩形框.png", 'btn_create_rect_box',
                                                   '创建矩形框', "Ctrl+T")
        self.btn_edit_rect_box = set_menu_button("../image/编辑框标签.png", 'btn_edit_rect_box',
                                                 '编辑框标签', "Ctrl+E")
        self.btn_del = set_menu_button("../image/删除.jpg", 'btn_del', '删除矩形框', "Ctrl+D")
        self.btn_save = set_menu_button("../image/save.jpg", 'btn_save', ' 保存标注 ', "Ctrl+S")

        # 操作栏

        self.btn_previous_img = set_menu_button('../image/上一张.png', 'btn_previous_img', ' 上一张 ',
                                                None)
        self.btn_next_img = set_menu_button('../image/下一张.png', 'btn_next_img', ' 下一张 ',
                                            None)
        self.btn_single_pre_annotated = set_menu_button('../image/单个预标注.png', 'btn_single_pre_annotated',
                                                        '单个预标注',
                                                        None)
        self.btn_batch_pre_annotated = set_menu_button('../image/批量预标注.png', 'btn_batch_pre_annotated',
                                                       '批量预标注',
                                                       None)

        self.models_combo_box = set_model_options()
        self.flags_dock_widget = set_inform_block('flags_list', 'Flags')
        self.label_list_dock_widget = set_inform_block('label_list', 'Label List')
        self.polygon_labels_dock_widget = set_inform_block('polygon_list', 'Polygon Labels')
        self.file_list_dock_widget = set_inform_block('file_list', 'File List')

        self.graphics_view = GraphicsView()
        self.graphics_view.setGeometry(QtCore.QRect(120, 60, 950, 860))
        self.graphics_view.setObjectName("graphics_view")

        self.setup_ui()

    def setup_ui(self):
        # 设置窗口属性
        # main_window.setObjectName("shangyi")
        # shangyi.setGeometry(150, 70,1610, 960)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../image/图标.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)
        self.resize(1610, 960)
        self.setWindowTitle("珠海轨道交通智测")

        # TODO:按钮的界面初始化使用对应的函数
        # 初始化，返回一个按钮对象
        # 大小、图标
        # 传入的参数是什么，按钮名称和图标路径
        # 确实需要通过配置文件来处理

        # 至于按钮要连接什么函数

        # 左边菜单栏
        menu_v_layout = QVBoxLayout()
        menu_v_layout.addWidget(self.btn_show_real_time)
        menu_v_layout.addWidget(self.btn_open_img)
        menu_v_layout.addWidget(self.btn_open_folder)
        menu_v_layout.addWidget(self.btn_create_rect_box)
        menu_v_layout.addWidget(self.btn_edit_rect_box)
        menu_v_layout.addWidget(self.btn_del)
        menu_v_layout.addWidget(self.btn_save)
        # 创建菜单栏小部件
        menu_widget = QWidget()
        menu_widget.setLayout(menu_v_layout)

        # 中间区域
        graph_v_layout = QVBoxLayout()

        # graphics_view.show()
        graph_v_layout.addWidget(self.graphics_view)
        # 中间区域小部件
        graph_widget = QWidget()
        graph_widget.setLayout(graph_v_layout)

        operation_v_layout = QVBoxLayout()
        operation_v_layout.addWidget(self.btn_previous_img)
        operation_v_layout.addWidget(self.btn_next_img)
        operation_v_layout.addWidget(self.btn_single_pre_annotated)
        operation_v_layout.addWidget(self.btn_batch_pre_annotated)
        # 创建操作栏小部件
        operation_widget = QWidget()
        operation_widget.setLayout(operation_v_layout)

        # 右边信息栏
        inform_v_layout = QVBoxLayout()

        inform_v_layout.addWidget(self.models_combo_box)
        inform_v_layout.addWidget(self.file_list_dock_widget)
        inform_v_layout.addWidget(self.flags_dock_widget)
        inform_v_layout.addWidget(self.label_list_dock_widget)
        inform_v_layout.addWidget(self.polygon_labels_dock_widget)

        # 创建操作栏小部件
        inform_widget = QWidget()
        inform_widget.setLayout(inform_v_layout)

        # 全局布局（1个）：水平
        wlayout = QHBoxLayout()
        wlayout.addWidget(menu_widget)
        wlayout.addWidget(graph_widget)
        wlayout.addWidget(operation_widget)
        wlayout.addWidget(inform_widget)

        # 设置各个部件在水平方向上占的比例
        wlayout.setStretch(0, 1)  # menu_widget 占 1 份
        wlayout.setStretch(1, 12)  # graph_widget 占 2 份
        wlayout.setStretch(2, 1)  # operation_widget 占 3 份
        wlayout.setStretch(3, 4)  # inform_widget 占 4 份

        w_widget = QWidget(self)
        w_widget.setLayout(wlayout)

        # TODO:
        #  创建部件，部件里有布局，
        #  再将这几个布局添加到水平布局中。然后用新建的部件设置该布局。

        # 设置中央小部件到主窗口
        self.setCentralWidget(w_widget)

    def btn_bind_func(self):
        # self.btn_open_img.clicked.connect(partial(open_image, self))
        self.btn_open_img.clicked.connect(self.open_image)
        self.btn_open_folder.clicked.connect(self.show_folder_img)
        self.btn_next_img.clicked.connect(self.show_next_img)

    def open_image(self):

        image, file_name = get_image()
        if image and file_name:
            self.graphics_view.show_img(image)
            flags_list = self.findChild(QListWidget, 'file_list')
            flags_list.clear()
            flags_list.addItem(file_name)
        else:
            pass

    def show_folder_img(self):
        img_files_list, curr_pic_path = get_folder_img_info()
        if img_files_list and curr_pic_path:
            image = QPixmap(curr_pic_path)

            self.graphics_view.show_img(image)
            json_path = curr_pic_path.split(".")[0] + ".json"

            if os.path.exists(json_path):
                self.read_json(json_path)
            # ui_object.showImg2(image)
            # 清空listWidget，
            flags_list = self.findChild(QListWidget, 'file_list')

            flags_list.clear()
            for i in range(0, len(img_files_list)):
                flags_list.insertItem(i, img_files_list[i])
            flags_list.currentRowChanged.connect(lambda i: self.graphics_view.show_img(QPixmap(img_files_list[i])))
        else:
            pass

    def show_next_img(self):
        flags_list = self.findChild(QListWidget, 'file_list')
        currentRow = flags_list.currentRow()
        # row = flags_list.row()
        next_img_path = flags_list.currentItem().text()
        self.graphics_view.show_img(QPixmap(next_img_path))
        selectedItems = flags_list.selectedItems()
        print()




class GraphicsView(QGraphicsView):
    pointsSignal = pyqtSignal(str)
    pointsSignal2 = pyqtSignal(int)

    MIDDLE_DOWN_WAI_KEYPOINT_CONNECTION_RULES = [
        ("L-sanjiao-1", "L-sanjiao-2", (0, 255, 0)),
        ("L-sanjiao-2", "L-sanjiao-3", (0, 255, 0)),
        ("L-sanjiao-3", "L-sanjiao-4", (0, 255, 0)),
        ("L-sanjiao-4", "L-sanjiao-5", (0, 255, 0)),
        ("L-sanjiao-5", "L-sanjiao-6", (0, 255, 0)),
        ("L-sanjiao-6", "L-sanjiao-7", (0, 255, 0)),

        ("L-sanjiao-8", "L-sanjiao-9", (0, 255, 0)),
        ("L-sanjiao-9", "R-sanjiao-1", (0, 255, 0)),
        ("R-sanjiao-1", "R-sanjiao-2", (0, 255, 0)),
        ("R-sanjiao-2", "R-sanjiao-3", (0, 255, 0)),
        ("R-sanjiao-3", "R-sanjiao-4", (0, 255, 0)),
        ("R-sanjiao-4", "R-sanjiao-5", (0, 255, 0)),
        ("R-sanjiao-5", "R-sanjiao-6", (0, 255, 0)),
        ("R-sanjiao-6", "R-sanjiao-7", (0, 255, 0)),
        ("R-sanjiao-7", "R-sanjiao-8", (255, 0, 0)),
        ("R-sanjiao-8", "R-sanjiao-9", (255, 0, 0)),
        ("L-pangguang-9", "L-pangguang-10", (255, 0, 0)),
        ("L-pangguang-10", "L-pangguang-11", (255, 0, 0)),
        ("L-pangguang-11", "L-pangguang-12", (255, 0, 0)),
        ("L-pangguang-12", "L-pangguang-13", (255, 0, 0)),
        ("L-pangguang-13", "L-pangguang-14", (255, 0, 0)),
        ("L-pangguang-14", "L-pangguang-15", (255, 0, 0)),
        ("L-pangguang-15", "L-pangguang-16", (255, 0, 0)),
        ("L-pangguang-16", "L-pangguang-17", (255, 0, 0)),
        ("L-pangguang-17", "L-pangguang-18", (255, 0, 0)),
        ("L-pangguang-18", "L-pangguang-19", (255, 0, 0)),
        ("L-pangguang-19", "L-pangguang-20", (255, 0, 0)),
        ("L-pangguang-20", "L-pangguang-21", (255, 0, 0)),
        ("L-pangguang-21", "L-pangguang-22", (255, 0, 0)),
        ("L-pangguang-22", "L-pangguang-23", (255, 0, 0)),
        ("L-pangguang-23", "L-pangguang-24", (255, 0, 0)),
        ("R-pangguang-9", "R-pangguang-10", (255, 0, 0)),
        ("R-pangguang-10", "R-pangguang-11", (255, 0, 0)),
        ("R-pangguang-11", "R-pangguang-12", (255, 0, 0)),
        ("R-pangguang-12", "R-pangguang-13", (255, 0, 0)),
        ("R-pangguang-13", "R-pangguang-14", (255, 0, 0)),
        ("R-pangguang-14", "R-pangguang-15", (255, 0, 0)),
        ("R-pangguang-15", "R-pangguang-16", (255, 0, 0)),
        ("R-pangguang-16", "R-pangguang-17", (255, 0, 0)),
        ("R-pangguang-17", "R-pangguang-18", (255, 0, 0)),
        ("R-pangguang-18", "R-pangguang-19", (255, 0, 0)),
        ("R-pangguang-19", "R-pangguang-20", (255, 0, 0)),
        ("R-pangguang-20", "R-pangguang-21", (255, 0, 0)),
        ("R-pangguang-21", "R-pangguang-22", (255, 0, 0)),
        ("R-pangguang-22", "R-pangguang-23", (255, 0, 0)),
        ("R-pangguang-23", "R-pangguang-24", (255, 0, 0)),
    ]

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.scene = GraphicsScene()
        self.setScene(self.scene)
        self.setTransformationAnchor(self.AnchorUnderMouse)
        self.setRenderHints(QPainter.Antialiasing |
                            QPainter.HighQualityAntialiasing |
                            QPainter.TextAntialiasing |
                            QPainter.SmoothPixmapTransform)
        self.setViewportUpdateMode(QGraphicsView.FullViewportUpdate)
        self.setDragMode(self.RubberBandDrag)
        self.setAlignment(Qt.AlignLeft | Qt.AlignTop)

        self.itemsToShapes = {}
        self.shapesToItems = {}
        self.Rectmode = True
        self.bboxPointList = []
        self.labelList = []
        self.bboxList = []

        self.acupuncturepoints = ('L-sanjiao-1', 'L-sanjiao-2', 'L-sanjiao-3', 'L-sanjiao-4', 'L-sanjiao-5',
                                  'L-sanjiao-6', 'L-sanjiao-7', 'L-sanjiao-8', 'L-sanjiao-9', 'R-sanjiao-1',
                                  'R-sanjiao-2',
                                  'R-sanjiao-3', 'R-sanjiao-4', 'R-sanjiao-5', 'R-sanjiao-6', 'R-sanjiao-7',
                                  'R-sanjiao-8', 'R-sanjiao-9',
                                  'L-pangguang-9', 'L-pangguang-10', 'L-pangguang-11', 'L-pangguang-12',
                                  'L-pangguang-13',
                                  'L-pangguang-14', 'L-pangguang-15', 'L-pangguang-16', 'L-pangguang-17',
                                  'L-pangguang-18',
                                  'L-pangguang-19', 'L-pangguang-20', 'L-pangguang-21', 'L-pangguang-22',
                                  'L-pangguang-23',
                                  'L-pangguang-24', 'R-pangguang-9', 'R-pangguang-10', 'R-pangguang-11',
                                  'R-pangguang-12',
                                  'R-pangguang-13', 'R-pangguang-14', 'R-pangguang-15', 'R-pangguang-16',
                                  'R-pangguang-17', 'R-pangguang-18',
                                  'R-pangguang-19', 'R-pangguang-20', 'R-pangguang-21', 'R-pangguang-22',
                                  'R-pangguang-23',
                                  'R-pangguang-24', "R-pangguang-7", "R-pangguang-30", "R-pangguang-8", "L-pangguang-7",
                                  "L-pangguang-30", "L-pangguang-8")

        self.scene.selectionChanged.connect(self.shapeSelectionChanged)

    def show_img(self, image):  # 图片显示
        self.scene.clear()
        self.bboxPointList.clear()
        self.bboxList.clear()
        self.itemsToShapes.clear()
        self.shapesToItems.clear()

        w = int(image.width() * self.height() / image.height())
        image = image.scaled(w, self.height())
        # self.image2=image
        picture = QGraphicsPixmapItem(image)
        self.scene.addItem(picture)

    def getColor(self):
        color: int
        color1 = randint(0, 255)
        color2 = randint(0, 255)
        color3 = randint(0, 255)
        return color1, color2, color3

    def shapeSelectionChanged(self):  # 标记选中改变
        items = self.scene.selectedItems()
        if len(items) > 0:
            index = self.findBboxItemIndexFromItem(items[0])
            self.pointsSignal2.emit(index)

    def mousePressEvent(self, event):  # 鼠标按下事件
        super().mousePressEvent(event)
        global text
        acupuncturepoints = ('L-sanjiao-1', 'L-sanjiao-2', 'L-sanjiao-3', 'L-sanjiao-4', 'L-sanjiao-5',
                             'L-sanjiao-6', 'L-sanjiao-7', 'L-sanjiao-8', 'L-sanjiao-9', 'R-sanjiao-1', 'R-sanjiao-2',
                             'R-sanjiao-3', 'R-sanjiao-4', 'R-sanjiao-5', 'R-sanjiao-6', 'R-sanjiao-7', 'R-sanjiao-8',
                             'R-sanjiao-9',
                             'L-pangguang-9', 'L-pangguang-10', 'L-pangguang-11', 'L-pangguang-12', 'L-pangguang-13',
                             'L-pangguang-14', 'L-pangguang-15', 'L-pangguang-16', 'L-pangguang-17', 'L-pangguang-18',
                             'L-pangguang-19', 'L-pangguang-20', 'L-pangguang-21', 'L-pangguang-22', 'L-pangguang-23',
                             'L-pangguang-24', 'R-pangguang-9', 'R-pangguang-10', 'R-pangguang-11', 'R-pangguang-12',
                             'R-pangguang-13', 'R-pangguang-14', 'R-pangguang-15', 'R-pangguang-16', 'R-pangguang-17',
                             'R-pangguang-18',
                             'R-pangguang-19', 'R-pangguang-20', 'R-pangguang-21', 'R-pangguang-22', 'R-pangguang-23',
                             'R-pangguang-24', "R-pangguang-7", "R-pangguang-30", "R-pangguang-8", "L-pangguang-7",
                             "L-pangguang-30", "L-pangguang-8")
        if event.button() == Qt.RightButton:
            if self.Rectmode:
                pt = self.mapToScene(event.pos())
                self.x1 = pt.x()
                self.y1 = pt.y()
            else:
                pt = self.mapToScene(event.pos())
                self.x1 = pt.x()
                self.y1 = pt.y()
                self.x1_view = event.x()
                self.y1_view = event.y()
                text, ok = QInputDialog().getItem(QWidget(), '添加Label', '输入label:', acupuncturepoints)
                if ok and text:
                    self.scene.clearSelection()
                    self.pointsSignal.emit(text)
                    shape = GraphicItem()
                    shape.setPos(self.x1, self.y1)
                    shape.setBrush(Qt.blue)
                    self.itemsToShapes[text] = shape
                    self.shapesToItems[shape] = text
                    self.scene.addItem(shape)

                    self.bboxList.append([shape])
                    self.savePoint(self.x1, self.y1, text)

        if event.button() == Qt.MiddleButton:
            it = self.get_item_at_click(event)

        if event.button() == Qt.LeftButton:
            item = self.get_item_at_click(event)
            # item.setSelected(True) #报错？？？

    def mouseMoveEvent(self, event):  # 鼠标移动事件
        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):  # 鼠标释放事件
        super().mouseReleaseEvent(event)
        acupuncturerects = ('BS', 'CZ', 'KJ')
        if event.button() == Qt.RightButton and self.Rectmode:
            pt = self.mapToScene(event.pos())
            self.x2 = pt.x()
            self.y2 = pt.y()
            text, ok = QInputDialog().getItem(QWidget(), '添加Label', '输入label:', acupuncturerects)
            if ok and text:
                self.scene.clearSelection()
                self.pointsSignal.emit(text)
                item = GraphicsRectItem(self.x1, self.y1, self.x2 - self.x1, self.y2 - self.y1)
                self.itemsToShapes[text] = item
                self.shapesToItems[item] = text
                self.scene.addItem(item)
                self.bboxList.append([item])
                self.saveRect(self.x1, self.y1, self.x2, self.y2, text)
                print('finish2saveRect')
                self.scene.addItem(item)
        if event.button() == Qt.LeftButton:
            item = self.get_item_at_click(event)
            pt = self.mapToScene(event.pos())
            self.x1 = pt.x()
            self.y1 = pt.y()
            if isinstance(item, GraphicItem):
                index = self.findBboxItemIndexFromItem(item)
                self.bboxPointList[index][0] = self.x1
                self.bboxPointList[index][1] = self.y1

    def saveRect(self, x1, y1, x2, y2, text):  # 保存矩形框信息
        bbox = [x1, y1, x2, y2, text]
        self.bboxPointList.append(bbox)

    def savePoint(self, x1, y1, text):  # 保存点信息
        bbox = [x1, y1, text]
        self.bboxPointList.append(bbox)

    def wheelEvent(self, e):  # 滚轮放缩
        if e.angleDelta().y() > 0:
            self.scale(1.1, 1.1)
        else:
            self.scale(1 / 1.1, 1 / 1.1)
        self.setTransformationAnchor(self.AnchorUnderMouse)

    def slotrectSignal(self):  # 开启矩形框模式
        self.Rectmode = True

    def slotpointSignal(self):
        self.Rectmode = False

    def get_item_at_click(self, event):  # 获取当前对象属性
        pos = event.pos()
        item = self.itemAt(pos)
        return item

    def findBboxItemIndexFromItem(self, item):
        for i, b in enumerate(self.bboxList):
            if b[0] == item:
                return i


class GraphicItem(QGraphicsEllipseItem):

    def __init__(self, parent=None):
        super().__init__(parent)
        pen = QPen()
        pen.setColor(QColor(0, 0, 0, 0))
        pen.setWidth(0.2)
        self.setPen(pen)
        self.pix = self.setRect(0, 0, 4, 4)
        self.setFlag(QGraphicsItem.ItemIsSelectable)
        self.setFlag(QGraphicsItem.ItemIsMovable)
        self.setAcceptHoverEvents(True)

    def hoverEnterEvent(self, event):
        self.setBrush(Qt.red)

    def hoverLeaveEvent(self, event):
        self.setBrush(Qt.blue)

    def mouseMoveEvent(self, event):
        super().mouseMoveEvent(event)
        if self.isSelected():
            for gr_edge in self.scene().edges:
                gr_edge.edge_wrap.update_positions()


class GraphicsScene(QGraphicsScene):

    def __init__(self, parent=None):
        super().__init__(parent)
        self.edges = []

    def selectshape(self, e):
        e.setSelected(True)

    def add_edge(self, edge):
        self.edges.append(edge)
        self.addItem(edge)


class GraphicsRectItem(QGraphicsRectItem):  # 矩形框类

    handleTopLeft = 1
    handleBottomRight = 8

    handleSize = +8.0
    handleSpace = -4.0

    handleCursors = {
        handleTopLeft: Qt.SizeFDiagCursor,
        handleBottomRight: Qt.SizeFDiagCursor,
    }

    def __init__(self, *args):
        super().__init__(*args)
        self.handles = {}
        self.handleSelected = None
        self.mousePressPos = None
        self.mousePressRect = None
        self.setAcceptHoverEvents(True)
        self.setFlag(QGraphicsItem.ItemIsMovable, True)
        self.setFlag(QGraphicsItem.ItemIsSelectable, True)
        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges, True)
        self.setFlag(QGraphicsItem.ItemIsFocusable, True)
        self.updateHandlesPos()
        self.setZValue(0)

    def handleAt(self, point):
        for k, v, in self.handles.items():
            if v.contains(point):
                return k
        return None

    def hoverMoveEvent(self, moveEvent):
        if self.isSelected():
            handle = self.handleAt(moveEvent.pos())
            cursor = Qt.ArrowCursor if handle is None else self.handleCursors[handle]
            self.setCursor(cursor)
        super().hoverMoveEvent(moveEvent)

    def hoverLeaveEvent(self, moveEvent):
        self.setCursor(Qt.ArrowCursor)
        super().hoverLeaveEvent(moveEvent)

    def mousePressEvent(self, mouseEvent):
        self.handleSelected = self.handleAt(mouseEvent.pos())
        if self.handleSelected:
            self.mousePressPos = mouseEvent.pos()
            self.mousePressRect = self.boundingRect()
        super().mousePressEvent(mouseEvent)

    def mouseMoveEvent(self, mouseEvent):
        if self.handleSelected is not None:
            self.interactiveResize(mouseEvent.pos())
        else:
            super().mouseMoveEvent(mouseEvent)

    def mouseReleaseEvent(self, mouseEvent):
        super().mouseReleaseEvent(mouseEvent)
        self.handleSelected = None
        self.mousePressPos = None
        self.mousePressRect = None
        self.update()

    def boundingRect(self):
        o = self.handleSize + self.handleSpace
        return self.rect().adjusted(-o, -o, o, o)

    def updateHandlesPos(self):
        s = self.handleSize
        b = self.boundingRect()
        self.handles[self.handleTopLeft] = QRectF(b.left(), b.top(), s, s)
        self.handles[self.handleBottomRight] = QRectF(b.right() - s, b.bottom() - s, s, s)

    def interactiveResize(self, mousePos):

        offset = self.handleSize + self.handleSpace
        boundingRect = self.boundingRect()
        rect = self.rect()
        diff = QPointF(0, 0)

        self.prepareGeometryChange()

        if self.handleSelected == self.handleTopLeft:

            fromX = self.mousePressRect.left()
            fromY = self.mousePressRect.top()
            toX = fromX + mousePos.x() - self.mousePressPos.x()
            toY = fromY + mousePos.y() - self.mousePressPos.y()
            diff.setX(toX - fromX)
            diff.setY(toY - fromY)
            boundingRect.setLeft(toX)
            boundingRect.setTop(toY)
            rect.setLeft(boundingRect.left() + offset)
            rect.setTop(boundingRect.top() + offset)
            self.setRect(rect)


        elif self.handleSelected == self.handleBottomRight:

            fromX = self.mousePressRect.right()
            fromY = self.mousePressRect.bottom()
            toX = fromX + mousePos.x() - self.mousePressPos.x()
            toY = fromY + mousePos.y() - self.mousePressPos.y()
            diff.setX(toX - fromX)
            diff.setY(toY - fromY)
            boundingRect.setRight(toX)
            boundingRect.setBottom(toY)
            rect.setRight(boundingRect.right() - offset)
            rect.setBottom(boundingRect.bottom() - offset)
            self.setRect(rect)

        self.updateHandlesPos()

    def paint(self, painter, option, widget=None):
        painter.setPen(QPen(QColor(0, 255, 255), 3.0, Qt.SolidLine))
        painter.drawRect(self.rect())

        painter.setRenderHint(QPainter.Antialiasing)
        painter.setBrush(QBrush(QColor(255, 0, 0, 255)))
        painter.setPen(QPen(QColor(0, 0, 0, 255), 1.0, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))
        for handle, rect in self.handles.items():
            if self.handleSelected is None or handle == self.handleSelected:
                painter.drawEllipse(rect)
